# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  schedule:
    - cron: 0 10 * * 5
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device:
        type: choice
        description: 'select device to build'
        options:
        - r4s
        - x86_x64
        default: 'x86_x64'
        required: false
      kernal:
        type: choice
        description: 'select kernal type'
        options:
        - regular_kernel
        - testing_kernel
        default: 'regular_kernel'
        required: false
      workchain:
        type: choice
        description: 'select work path'
        options:
        - Generic
        - MainNet
        - SubNet
        default: 'MainNet'
        required: false
      branch:
        description: 'select openwrt branch'
        default: 'master'
        required: false
  release:
    types: [published]

jobs:

  build_packages:
    name: Build ${{ github.event.inputs.device }}_${{ github.event.inputs.kernal }}
    runs-on: ubuntu-latest
    env:
      DEVICE: ${{ github.event.inputs.device }}
      KERNAL: ${{ github.event.inputs.kernal }}
      BRANCH: ${{ github.event.inputs.branch }}

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Update feeds
        run: |
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/extra_feeds
          cat extra_feeds >> feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        
      - name: Fetch library configuration 1
        if: ${{ github.event.inputs.workchain == 'Generic' }}
        run: |
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_$DEVICE
          cat config_$DEVICE > .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_$DEVICE.sh
          chmod +x ./patches_$DEVICE.sh
          ./patches_$DEVICE.sh
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_generic
          cat config_generic >> .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_generic.sh
          chmod +x ./patches_generic.sh
          ./patches_main.sh
                  
      - name: Fetch library configuration 2
        if: ${{ github.event.inputs.workchain == 'MainNet' }}
        run: |
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_$DEVICE
          cat config_$DEVICE > .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_generic
          cat config_generic >> .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_main.sh
          chmod +x ./patches_main.sh
          ./patches_main.sh
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_$DEVICE.sh
          chmod +x ./patches_$DEVICE.sh
          ./patches_$DEVICE.sh
          
      - name: Fetch library configuration 3
        if: ${{ github.event.inputs.workchain == 'SubNet' }}
        run: |
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_$DEVICE
          cat config_$DEVICE > .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/config_subnet
          cat config_subnet >> .config
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_subnet.sh
          chmod +x ./patches_subnet.sh
          ./patches_subnet.sh
          wget https://raw.githubusercontent.com/Nonosword/library/main/openwrt/patches_$DEVICE.sh
          chmod +x ./patches_$DEVICE.sh
          ./patches_$DEVICE.sh
          
      - name: Enable Testing Kernal
        if: ${{ github.event.inputs.kernal == 'testing_kernel' }}
        run: |
            echo 'CONFIG_TESTING_KERNEL=y' >> .config

      - name: Generate configuration file
        run: |
            sed -i 's/^[ \t]*//g' ./.config
            cat .config
            make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
    
      - name: Get current date
        id: date
        run: echo "::set-output name=today::$(date +'%Y%m%d')"
        
      - name: Read kernel version
        id: kernel
        run: |
          grep 'CONFIG_LINUX_' .config
          echo "::set-output name=version::$(grep 'CONFIG_LINUX_' .config | cut -d'_' -f 3,4 | cut -d'=' -f 1)"
          
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: Buildinfo_${{ github.event.inputs.device }}_${{ github.event.inputs.workchain }}_${{ steps.kernel.outputs.version }}_${{ steps.date.outputs.today }}
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: Package_${{ github.event.inputs.device }}_${{ github.event.inputs.workchain }}_${{ steps.kernel.outputs.version }}_${{ steps.date.outputs.today }}
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: Firmware_${{ github.event.inputs.device }}_${{ github.event.inputs.workchain }}_${{ steps.kernel.outputs.version }}_${{ steps.date.outputs.today }}
          path: ./bin/targets/
  
      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
